#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

#define JP_ZKHK  GRAVE        // Zenkaku ↔ Hankaku ↔ Kanji (半角 ↔ 全角 ↔ 漢字)
#define JP_MINUS MINUS        // -
#define JP_CARET EQUAL        // ^
#define JP_YEN   INT3         // ¥
#define JP_AT    LBKT         // @
#define JP_LBKT  RBKT         // [
#define JP_EISU  CAPS         // Eisū (英数)
#define JP_SEMI  SEMI         // ;
#define JP_COLON SQT          // :
#define JP_RBKT  NUHS         // ]
#define JP_COMMA COMMA        // ,
#define JP_DOT   DOT          // .
#define JP_SLASH SLASH        // /
#define JP_BSLH  INT1         // (backslash)
#define JP_MHEN  INT5         // Muhenkan (無変換)
#define JP_HENK  INT4         // Henkan (変換)
#define JP_KANA  INT2         // Katakana ↔ Hiragana ↔ Rōmaji (カタカナ ↔ ひらがな ↔ ローマ字)
#define JP_EXCL  LS(N1)       // !
#define JP_DQT   LS(N2)       // "
#define JP_HASH  LS(N3)       // #
#define JP_DLLR  LS(N4)       // $
#define JP_PRCNT LS(N5)       // %
#define JP_AMPS  LS(N6)       // &
#define JP_SQT   LS(N7)       // '
#define JP_LPAR  LS(N8)       // (
#define JP_RPAR  LS(N9)       // )
#define JP_EQUAL LS(JP_MINUS) // =
#define JP_TILDE LS(JP_CARET) // ~
#define JP_PIPE  LS(JP_YEN)   // |
#define JP_GRAVE LS(JP_AT)    // `
#define JP_LBRC  LS(JP_LBKT)  // {
#define JP_CAPS  LS(JP_EISU)  // Caps Lock
#define JP_PLUS  LS(JP_SEMI)  // +
#define JP_ASTRK LS(JP_COLON) // *
#define JP_RBRC  LS(JP_RBKT)  // }
#define JP_LT    LS(JP_COMMA) // <
#define JP_RT    LS(JP_DOT)   // >
#define JP_QMARK LS(JP_SLASH) // ?
#define JP_UNDER LS(JP_BSLH)  // _

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 11>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <10 11>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <20 21>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <13 18>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <19 20>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <18 19>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <6 7>;
        };

        colon {
            bindings = <&kp JP_COLON>;
            key-positions = <7 8>;
        };

        at {
            bindings = <&kp JP_AT>;
            key-positions = <8 9>;
        };

        equal {
            bindings = <&kp JP_EQUAL>;
            key-positions = <31 32>;
        };

        henkan {
            bindings = <&kp JP_HENK>;
            key-positions = <30 31>;
        };

        eisu {
            bindings = <&kp JP_MHEN>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RCTRL>, <&mo 2>, <&kp LALT>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            label = "zmk,keymap";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q     &kp W      &kp E         &kp R  &kp T                                                   &kp Y      &kp U  &kp I         &kp O       &kp P
&kp A     &kp S      &kp D         &kp F  &kp G       &trans                       &kp JP_COLON   &kp H      &kp J  &kp K         &kp L       &kp MINUS
&kp Z     &kp X      &kp C         &kp V  &kp B       &mo 6                        &kp BACKSPACE  &kp N      &kp M  &kp JP_COMMA  &kp JP_DOT  &kp JP_SLASH
&kp LWIN  &kp LCTRL  &kp LEFT_ALT  &mo 1  &kp LSHIFT  &lt 2 SPACE                  &lt 3 ENTER    &td0                                        &kp JP_BSLH
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        NUM {
            bindings = <
&kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_N4    &kp KP_N5                             &kp KP_N6     &kp KP_N7    &kp KP_N8    &kp KP_N9    &kp KP_N0
&kp EXCL      &kp JP_DQT    &kp HASH      &kp DOLLAR   &kp PERCENT   &trans        &trans    &kp JP_AMPS   &kp JP_SQT   &kp JP_LPAR  &kp JP_RPAR  &kp JP_COLON
&kp JP_CARET  &kp JP_GRAVE  &kp JP_EQUAL  &kp JP_PLUS  &kp JP_ASTRK  &trans        &trans    &kp JP_LBRC   &kp JP_RBRC  &kp JP_LBKT  &kp JP_RBKT  &kp JP_SEMI
&kp JP_AT     &trans        &trans        &trans       &trans        &trans        &trans    &trans                                               &kp JP_PIPE
            >;
        };

        ARROW {
            bindings = <
&trans    &trans        &kp END  &trans  &trans                                 &kp LG(LEFT_ARROW)  &kp LG(DOWN_ARROW)  &kp LG(UP_ARROW)  &kp LG(RIGHT_ARROW)  &trans
&kp HOME  &kp BACKSPACE &kp DEL  &trans  &trans  &trans                 &trans  &kp LEFT_ARROW      &kp DOWN_ARROW      &kp UP_ARROW      &kp RIGHT_ARROW      &trans
&trans    &trans        &trans   &trans  &trans  &trans                 &trans  &trans              &trans              &trans            &trans               &trans
&trans    &trans        &trans   &trans  &trans  &trans                 &trans  &trans                                                                         &trans
            >;
        };

        FUNCTION {
            bindings = <
&trans  &kp F7  &kp F8  &kp F9  &kp F10                                     &trans     &kp KP_N7  &kp KP_N8  &kp KP_N9  &trans
&trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans                     &trans  &trans     &kp KP_N4  &kp KP_N5  &kp KP_N6  &trans
&trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans                     &trans  &kp KP_N0  &kp KP_N1  &kp KP_N2  &kp KP_N3  &trans
&trans  &trans  &trans  &trans  &trans   &trans                     &trans  &trans                                      &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &mo 5     &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB4  &mkp MB5  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans        &trans        &trans        &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
